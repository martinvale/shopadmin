<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

  <security:http use-expressions="true" entry-point-ref="preAuthenticatedProcessingFilterEntryPoint">
    <security:intercept-url pattern="/login" access="permitAll" />
    <security:intercept-url pattern="/logout" access="permitAll" />
    <security:intercept-url pattern="/css/**" access="permitAll" />
    <security:intercept-url pattern="/script/**" access="permitAll" />
    <security:intercept-url pattern="/font-awesome/**" access="permitAll" />
    <security:intercept-url pattern="/favicon.ico" access="permitAll" />
    <security:intercept-url pattern="/adicional/new" access="hasRole('ADITIONAL')" />
    <security:intercept-url pattern="/adicional/edit" access="hasRole('ADITIONAL')" />
    <security:intercept-url pattern="/**" access="isAuthenticated()" />
    <security:form-login
        login-page="/login"
        default-target-url="/"
        authentication-failure-url="/login?error"
        username-parameter="username"
        password-parameter="password" />
    <security:logout logout-success-url="/login?logout" />
    <!--security:custom-filter position="PRE_AUTH_FILTER" ref="gaeFilter" /-->
  </security:http>

  <bean id="preAuthenticatedProcessingFilterEntryPoint"
      class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
      <constructor-arg index="0" value="/login" />
  </bean>

  <!--bean id="gaeFilter" class="com.ibiscus.propial.web.security.GaeAuthenticationFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="failureHandler">
      <bean class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="exceptionMappings">
            <map>
              <entry Key="org.springframework.security.authentication.DisabledException" value="/disabled" />
            </map>
        </property>
      </bean>
    </property>
  </bean-->

  <security:authentication-manager alias="authenticationManager">
    <security:authentication-provider ref="daoAuthenticationProvider"/>
  </security:authentication-manager>

  <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
    <property name="userDetailsService" ref="userDetailsService" />
  </bean>

  <bean id="userDetailsService" class="com.ibiscus.shopnchek.application.security.UserDetailsServiceImpl">
    <constructor-arg index="0" ref="userRepository" />
  </bean>

  <bean id="userRepository" class="com.ibiscus.shopnchek.domain.security.UserRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="roleRepository" class="com.ibiscus.shopnchek.domain.security.RoleRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="orderRepository" class="com.ibiscus.shopnchek.domain.admin.OrderRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="itemOrderRepository" class="com.ibiscus.shopnchek.domain.admin.ItemOrderRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="proveedorRepository" class="com.ibiscus.shopnchek.domain.admin.ProveedorRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="sucursalShopmetricsRepository" class="com.ibiscus.shopnchek.domain.admin.SucursalShopmetricsRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="debtRepository" class="com.ibiscus.shopnchek.domain.debt.DebtRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="tipoPagoRepository" class="com.ibiscus.shopnchek.domain.admin.TipoPagoRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="clientRepository" class="com.ibiscus.shopnchek.domain.debt.ClientRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="branchRepository" class="com.ibiscus.shopnchek.domain.debt.BranchRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="shopperRepository" class="com.ibiscus.shopnchek.domain.admin.ShopperRepository">
    <property name="sessionFactory" ref="sessionFactory2"></property>
  </bean>

  <bean id="programRepository" class="com.ibiscus.shopnchek.domain.admin.ProgramRepository">
    <property name="sessionFactory" ref="sessionFactory2"></property>
  </bean>

  <bean id="sucursalMCDRepository" class="com.ibiscus.shopnchek.domain.admin.SucursalMCDRepository">
    <property name="sessionFactory" ref="sessionFactory2"></property>
  </bean>

  <bean id="feedRepository" class="com.ibiscus.shopnchek.domain.debt.FeedRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="batchTaskStatusRepository" class="com.ibiscus.shopnchek.domain.tasks.BatchTaskStatusRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="accountRepository" class="com.ibiscus.shopnchek.domain.account.AccountRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <bean id="activityRepository" class="com.ibiscus.shopnchek.domain.security.ActivityRepository">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <!-- Services -->
  <bean id="itemsOrdenService" class="com.ibiscus.shopnchek.application.order.ItemsOrdenService">
    <constructor-arg index="0" ref="dataSource" />
  </bean>

  <bean id="reportsService" class="com.ibiscus.shopnchek.application.report.ReportService">
    <constructor-arg index="0" ref="dataSource" />
    <constructor-arg index="1" ref="debtRepository" />
  </bean>

  <bean id="debtService" class="com.ibiscus.shopnchek.application.debt.DebtService">
    <constructor-arg ref="debtRepository" />
  </bean>

  <bean id="clientService" class="com.ibiscus.shopnchek.application.client.ClientService">
    <constructor-arg ref="clientRepository" />
  </bean>

  <bean id="communicationService" class="com.ibiscus.shopnchek.application.email.CommunicationService">
    <constructor-arg index="0" value="smtp.office365.com" />
    <constructor-arg index="1" value="587" />
    <constructor-arg index="2" value="pagosshopnchek@shopnchek.com.ar" />
    <constructor-arg index="3" value="DOejj339" />
    <!-- constructor-arg index="3" value="Hopa9059" /-->
  </bean>

  <bean id="importerService" class="com.ibiscus.shopnchek.application.shopmetrics.ImportService">
    <property name="orderRepository" ref="orderRepository" />
    <property name="debtRepository" ref="debtRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="batchTaskStatusRepository" ref="batchTaskStatusRepository" />
  </bean>

  <!-- Commands -->
  <bean id="saveOrderCommand" class="com.ibiscus.shopnchek.application.order.SaveOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="activityRepository" ref="activityRepository" />
  </bean>

  <bean id="getOrderCommand" class="com.ibiscus.shopnchek.application.order.GetOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
  </bean>

  <bean id="getOrderDtoCommand" class="com.ibiscus.shopnchek.application.order.GetOrderDtoCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="accountRepository" ref="accountRepository" />
  </bean>

  <bean id="searchOrderDtoCommand" class="com.ibiscus.shopnchek.application.order.SearchOrderDtoCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="accountRepository" ref="accountRepository" />
  </bean>

  <bean id="searchReopenedOrdersCommand" class="com.ibiscus.shopnchek.application.order.SearchReopenedOrdersCommand"
        scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="accountRepository" ref="accountRepository" />
  </bean>

  <bean id="payOrderCommand" class="com.ibiscus.shopnchek.application.order.PayOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="activityRepository" ref="activityRepository" />
    <property name="communicationService" ref="communicationService" />
    <property name="from" value="pagosshopnchek@shopnchek.com.ar" />
  </bean>

  <bean id="savePaymentDataCommand" class="com.ibiscus.shopnchek.application.order.SavePaymentDataCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
  </bean>

  <bean id="transitionOrderCommand" class="com.ibiscus.shopnchek.application.order.TransitionOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="activityRepository" ref="activityRepository" />
    <property name="userRepository" ref="userRepository" />
    <property name="communicationService" ref="communicationService" />
    <property name="from" value="pagosshopnchek@shopnchek.com.ar" />
    <property name="usernamesToNotify" ref="usernamesToNotify" />
  </bean>

  <util:list id="usernamesToNotify" value-type="java.lang.String">
    <value>mcampagne</value>
  </util:list>

  <bean id="removeItemOrderCommand" class="com.ibiscus.shopnchek.application.order.RemoveItemOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
    <property name="debtRepository" ref="debtRepository" />
  </bean>

  <bean id="asociarMedioPagoCommand" class="com.ibiscus.shopnchek.application.order.AsociarMedioPagoCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
  </bean>

  <bean id="updateItemOrderCommand" class="com.ibiscus.shopnchek.application.order.UpdateItemOrderCommand" scope="prototype">
    <property name="orderRepository" ref="orderRepository" />
  </bean>

  <bean id="searchClientDtoCommand" class="com.ibiscus.shopnchek.application.client.SearchClientCommand" scope="prototype">
    <property name="clientRepository" ref="clientRepository" />
  </bean>

  <bean id="getDebtCommand" class="com.ibiscus.shopnchek.application.debt.GetDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
  </bean>

  <bean id="createDebtCommand" class="com.ibiscus.shopnchek.application.debt.CreateDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="userRepository" ref="userRepository" />
    <property name="communicationService" ref="communicationService" />
    <property name="from" value="pagosshopnchek@shopnchek.com.ar" />
    <property name="site" value="${application.url}" />
  </bean>
  
  <bean id="saveDebtCommand" class="com.ibiscus.shopnchek.application.debt.SaveDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
  </bean>

  <bean id="updateImporteDebtCommand" class="com.ibiscus.shopnchek.application.debt.UpdateImporteDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
  </bean>

  <bean id="searchDebtCommand" class="com.ibiscus.shopnchek.application.debt.SearchDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
  </bean>

  <bean id="searchDebtDtoCommand" class="com.ibiscus.shopnchek.application.debt.SearchDebtDtoCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
  </bean>

  <bean id="assignDebtCommand" class="com.ibiscus.shopnchek.application.debt.AssignDebtCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
    <property name="orderRepository" ref="orderRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="itemsOrdenService" ref="itemsOrdenService" />
  </bean>

  <bean id="getMcdPendingDebtCommand" class="com.ibiscus.shopnchek.application.debt.GetMcdPendingDebtCommand" scope="prototype">
    <property name="dataSource" ref="dataSource" />
    <property name="debtRepository" ref="debtRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="feedRepository" ref="feedRepository" />
  </bean>

  <!--bean id="getIngematicaPendingDebtCommand" class="com.ibiscus.shopnchek.application.debt.GetIngematicaPendingDebtCommand" scope="prototype">
    <property name="dataSource" ref="dataSource" />
    <property name="debtRepository" ref="debtRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="feedRepository" ref="feedRepository" />
  </bean-->

  <bean id="getFeedCommand" class="com.ibiscus.shopnchek.application.feed.GetFeedCommand" scope="prototype">
    <property name="feedRepository" ref="feedRepository" />
  </bean>

  <bean id="saveFeedCommand" class="com.ibiscus.shopnchek.application.feed.SaveFeedCommand" scope="prototype">
    <property name="feedRepository" ref="feedRepository" />
    <property name="debtRepository" ref="debtRepository" />
  </bean>

  <bean id="getUserCommand" class="com.ibiscus.shopnchek.application.security.GetUserCommand" scope="prototype">
    <property name="userRepository" ref="userRepository" />
  </bean>

  <bean id="searchUserCommand" class="com.ibiscus.shopnchek.application.security.SearchUserCommand" scope="prototype">
    <property name="userRepository" ref="userRepository" />
  </bean>

  <bean id="saveUserCommand" class="com.ibiscus.shopnchek.application.security.SaveUserCommand" scope="prototype">
    <property name="userRepository" ref="userRepository" />
    <property name="roleRepository" ref="roleRepository" />
  </bean>

  <bean id="saveShopperCommand" class="com.ibiscus.shopnchek.application.shopper.SaveShopperCommand" scope="prototype">
    <property name="shopperRepository" ref="shopperRepository" />
  </bean>

  <bean id="getTitularCommand" class="com.ibiscus.shopnchek.application.proveedor.GetTitularCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="accountRepository" ref="accountRepository" />
  </bean>

  <bean id="saveTitularCommand" class="com.ibiscus.shopnchek.application.proveedor.SaveTitularCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="accountRepository" ref="accountRepository" />
  </bean>

  <bean id="searchTitularCommand" class="com.ibiscus.shopnchek.application.proveedor.SearchTitularCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="accountRepository" ref="accountRepository" />
    <property name="orderRepository" ref="orderRepository" />
  </bean>

  <bean id="getProveedorCommand" class="com.ibiscus.shopnchek.application.proveedor.GetProveedorCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
  </bean>

  <bean id="saveProveedorCommand" class="com.ibiscus.shopnchek.application.proveedor.SaveProveedorCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
  </bean>

  <bean id="deleteProveedorCommand" class="com.ibiscus.shopnchek.application.proveedor.DeleteProveedorCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
  </bean>

  <bean id="searchProveedorCommand" class="com.ibiscus.shopnchek.application.proveedor.SearchProveedorCommand" scope="prototype">
    <property name="proveedorRepository" ref="proveedorRepository" />
  </bean>

  <bean id="importFileCommand" class="com.ibiscus.shopnchek.application.shopmetrics.ImportFileCommand" scope="prototype">
    <property name="debtRepository" ref="debtRepository" />
    <property name="clientRepository" ref="clientRepository" />
    <property name="branchRepository" ref="branchRepository" />
    <property name="shopperRepository" ref="shopperRepository" />
    <property name="batchTaskStatusRepository" ref="batchTaskStatusRepository" />
  </bean>

  <bean id="fileImportTask" class="com.ibiscus.shopnchek.application.shopmetrics.FileImportTask">
    <constructor-arg index="0" ref="batchTaskStatusRepository" />
    <constructor-arg index="1" ref="debtRepository" />
    <constructor-arg index="2" ref="clientRepository" />
    <constructor-arg index="3" ref="branchRepository" />
    <constructor-arg index="4" ref="shopperRepository" />
  </bean>

  <!-- Properties -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="/WEB-INF/shopnchek.properties" />
  </bean>

  <!-- bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.databaseurl}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <property name="testOnBorrow" value="true" />
    <property name="testOnReturn" value="true" />
    <property name="testWhileIdle" value="true" />
    <property name="timeBetweenEvictionRunsMillis" value="1800000" />
    <property name="numTestsPerEvictionRun" value="3" />
    <property name="minEvictableIdleTimeMillis" value="1800000" />
    <property name="initialSize" value="5" />
    <property name="maxTotal" value="10" />
    <property name="validationQuery" value="select 1" />
  </beans-->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.databaseurl}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
  </bean>
  <!-- bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="${jdbc.driverClassName}" />
    <property name="jdbcUrl" value="${jdbc.databaseurl}" />
    <property name="user" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />

    <property name="acquireIncrement" value="5" />
    <property name="minPoolSize" value="5" />
    <property name="maxPoolSize" value="20" />
    <property name="maxIdleTime" value="30" />
  </bean-->

  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <property name="configLocation">
      <value>classpath:hibernate.cfg.xml</value>
    </property>
    <property name="configurationClass">
      <value>org.hibernate.cfg.AnnotationConfiguration</value>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">${jdbc.dialect}</prop>
        <prop key="hibernate.show_sql">false</prop>
      </props>
    </property>
  </bean>

  <bean id="dataSource2" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc2.driverClassName}" />
    <property name="url" value="${jdbc2.databaseurl}" />
    <property name="username" value="${jdbc2.username}" />
    <property name="password" value="${jdbc2.password}" />
  </bean>
  <!-- bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="${jdbc2.driverClassName}" />
    <property name="jdbcUrl" value="${jdbc2.databaseurl}" />
    <property name="user" value="${jdbc2.username}" />
    <property name="password" value="${jdbc2.password}" />

    <property name="acquireIncrement" value="5" />
    <property name="minPoolSize" value="5" />
    <property name="maxPoolSize" value="20" />
    <property name="maxIdleTime" value="30" />
  </bean-->


  <bean id="sessionFactory2" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource2"></property>
    <property name="configLocation">
      <value>classpath:hibernate.cfg.xml</value>
    </property>
    <property name="configurationClass">
      <value>org.hibernate.cfg.AnnotationConfiguration</value>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">${jdbc2.dialect}</prop>
        <prop key="hibernate.show_sql">false</prop>
      </props>
    </property>
  </bean>

  <context:component-scan base-package="com.ibiscus.shopnchek.web.controller" />
  <context:component-scan base-package="com.ibiscus.shopnchek.application" />

  <tx:annotation-driven proxy-target-class="true" />

  <!-- bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean-->
  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>

  <!-- Quartz -->
  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <!-- property name="configLocation" value="classpath:quartz.properties" /-->
    <property name="quartzProperties">
      <map>
        <entry key="org.quartz.scheduler.instanceName" value="Pending Debt Scheduler" />
        <entry key="org.quartz.threadPool.threadCount" value="3" />
        <!-- entry Key="org.quartz.jobStore.class" value="org.quartz.simpl.RAMJobStore" /-->
      </map>
    </property>
    <property name="triggers">
      <list>
        <ref bean="getMcdPendingDebtTrigger" />
        <!--ref bean="getIngematicaPendingDebtTrigger" /-->
      </list>
    </property>
  </bean>

  <bean name="getMcdPendingDebtJobDetail"
      class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="com.ibiscus.shopnchek.application.jobs.GetPendingDebtJob" />
    <property name="durability" value="true" />
    <property name="jobDataAsMap">
      <map>
        <entry key="command" value-ref="getMcdPendingDebtCommand" />
      </map>
    </property>
  </bean>

  <bean id="getMcdPendingDebtTrigger"
      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="getMcdPendingDebtJobDetail" />
    <property name="cronExpression" value="0 0/2 * * * ?" /><!-- every 15 minutes -->
  </bean>

  <!--bean name="getIngematicaPendingDebtJobDetail"
      class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="com.ibiscus.shopnchek.application.jobs.GetPendingDebtJob" />
    <property name="durability" value="true" />
    <property name="jobDataAsMap">
      <map>
        <entry Key="command" value-ref="getIngematicaPendingDebtCommand" />
      </map>
    </property>
  </bean>

  <bean id="getIngematicaPendingDebtTrigger"
      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="getIngematicaPendingDebtJobDetail" />
    <property name="cronExpression" value="0 0 0/1 * * ?" />
  </bean-->
</beans>